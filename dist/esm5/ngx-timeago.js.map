{
  "version": 3,
  "file": "ngx-timeago.js",
  "sources": [
    "ng://ngx-timeago/out/timeago.module.ts",
    "ng://ngx-timeago/out/timeago.pipe.ts",
    "ng://ngx-timeago/out/timeago.directive.ts",
    "ng://ngx-timeago/out/timeago.formatter.ts",
    "ng://ngx-timeago/out/timeago.intl.ts",
    "ng://ngx-timeago/out/timeago.clock.ts",
    "ng://ngx-timeago/out/util.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\r\nimport { TimeagoDirective } from './timeago.directive';\r\nimport { TimeagoPipe } from './timeago.pipe';\r\nimport { TimeagoClock, TimeagoDefaultClock } from './timeago.clock';\r\nimport { TimeagoFormatter, TimeagoDefaultFormatter } from './timeago.formatter';\r\n\r\nexport interface TimeagoModuleConfig {\r\n  clock?: Provider;\r\n  intl?: Provider;\r\n  formatter?: Provider;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TimeagoDirective,\r\n    TimeagoPipe,\r\n  ],\r\n  exports: [\r\n    TimeagoDirective,\r\n    TimeagoPipe,\r\n  ],\r\n})\r\nexport class TimeagoModule {\r\n  /**\r\n   * Use this method in your root module to provide the TimeagoModule\r\n   */\r\n  static forRoot(config: TimeagoModuleConfig = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: TimeagoModule,\r\n      providers: [\r\n        config.clock || {provide: TimeagoClock, useClass: TimeagoDefaultClock},\r\n        config.intl || [],\r\n        config.formatter || {provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter},\r\n      ],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Use this method in your other (non root) modules to import the directive/pipe\r\n   */\r\n  static forChild(config: TimeagoModuleConfig = {}): ModuleWithProviders {\r\n    return {\r\n      ngModule: TimeagoModule,\r\n      providers: [\r\n        config.clock || {provide: TimeagoClock, useClass: TimeagoDefaultClock},\r\n        config.intl || [],\r\n        config.formatter || {provide: TimeagoFormatter, useClass: TimeagoDefaultFormatter},\r\n      ],\r\n    };\r\n  }\r\n}\r\n",
    "import { Injectable, OnDestroy, Pipe, PipeTransform, Optional, ChangeDetectorRef } from '@angular/core';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { TimeagoClock } from './timeago.clock';\r\nimport { TimeagoFormatter } from './timeago.formatter';\r\nimport { TimeagoIntl } from './timeago.intl';\r\nimport { isDefined, coerceBooleanProperty, dateParser } from './util';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Injectable()\r\n@Pipe({\r\n  name: 'timeago',\r\n  pure: false, // required to update the value when stateChanges emits\r\n})\r\nexport class TimeagoPipe implements PipeTransform, OnDestroy {\r\n  private intlSubscription: Subscription;\r\n  private clockSubscription: Subscription;\r\n\r\n  private date: number;\r\n  private value: string;\r\n  private live = true;\r\n\r\n  /**\r\n   * Emits on:\r\n   * - Input change\r\n   * - Intl change\r\n   * - Clock tick\r\n  */\r\n  stateChanges = new Subject<void>();\r\n\r\n  constructor(@Optional() intl: TimeagoIntl,\r\n    cd: ChangeDetectorRef,\r\n    formatter: TimeagoFormatter,\r\n    private clock: TimeagoClock) {\r\n    if (intl) {\r\n      this.intlSubscription = intl.changes.subscribe(() => this.stateChanges.next());\r\n    }\r\n    this.stateChanges.subscribe(() => {\r\n      this.value = formatter.format(this.date);\r\n      cd.markForCheck();\r\n    });\r\n  }\r\n\r\n  transform(date: any, ...args: any[]) {\r\n    const _date = dateParser(date).valueOf();\r\n    let _live: boolean;\r\n\r\n    _live = isDefined(args[0])\r\n      ? coerceBooleanProperty(args[0])\r\n      : this.live;\r\n\r\n    if (this.date === _date && this.live === _live) {\r\n      return this.value;\r\n    }\r\n\r\n    this.date = _date;\r\n    this.live = _live;\r\n\r\n    if (this.date) {\r\n      if (this.clockSubscription) {\r\n        this.clockSubscription.unsubscribe();\r\n        this.clockSubscription = undefined;\r\n      }\r\n      this.clockSubscription = this.clock.tick(this.date)\r\n        .pipe(filter(() => this.live, this))\r\n        .subscribe(() => this.stateChanges.next());\r\n      this.stateChanges.next();\r\n    } else {\r\n      throw new SyntaxError(`Wrong parameter in TimeagoPipe. Expected a valid date, received: ${date}`);\r\n    }\r\n\r\n    return this.value;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.intlSubscription) {\r\n      this.intlSubscription.unsubscribe();\r\n      this.intlSubscription = undefined;\r\n    }\r\n    if (this.clockSubscription) {\r\n      this.clockSubscription.unsubscribe();\r\n      this.clockSubscription = undefined;\r\n    }\r\n    this.stateChanges.complete();\r\n  }\r\n}\r\n",
    "import { Directive, Input, ElementRef, Optional, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { TimeagoClock } from './timeago.clock';\r\nimport { TimeagoFormatter } from './timeago.formatter';\r\nimport { TimeagoIntl } from './timeago.intl';\r\nimport { isDefined, coerceBooleanProperty, dateParser } from './util';\r\n\r\n@Directive({\r\n  selector: '[timeago]',\r\n  exportAs: 'timeago',\r\n})\r\nexport class TimeagoDirective implements OnChanges, OnDestroy {\r\n  private intlSubscription: Subscription;\r\n  private clockSubscription: Subscription;\r\n\r\n  /**\r\n   * Emits on:\r\n   * - Input change\r\n   * - Intl change\r\n   * - Clock tick\r\n  */\r\n  stateChanges = new Subject<any>();\r\n\r\n  /** The Date to display. An actual Date object or something that can be fed to new Date. */\r\n  @Input()\r\n  get date(): any {\r\n    return this._date;\r\n  }\r\n  set date(date: any) {\r\n    this._date = dateParser(date).valueOf();\r\n    if (this._date) {\r\n      if (this.clockSubscription) {\r\n        this.clockSubscription.unsubscribe();\r\n        this.clockSubscription = undefined;\r\n      }\r\n      this.clockSubscription = this.clock.tick(this.date)\r\n        .pipe(filter(() => this.live, this))\r\n        .subscribe(() => this.stateChanges.next());\r\n    } else {\r\n      throw new SyntaxError(`Wrong parameter in TimeagoDirective. Expected a valid date, received: ${date}`);\r\n    }\r\n  }\r\n  private _date: number;\r\n\r\n  /** If the directive should update itself over time */\r\n  @Input()\r\n  get live(): boolean {\r\n    return this._live;\r\n  }\r\n  set live(live: boolean) {\r\n    this._live = coerceBooleanProperty(live);\r\n  }\r\n  private _live = true;\r\n\r\n  constructor(@Optional() intl: TimeagoIntl,\r\n              private cd: ChangeDetectorRef,\r\n              formatter: TimeagoFormatter,\r\n              element: ElementRef,\r\n              private clock: TimeagoClock) {\r\n    if (intl) {\r\n      this.intlSubscription = intl.changes.subscribe(() => this.stateChanges.next());\r\n    }\r\n    this.stateChanges.subscribe(() => {\r\n      this.setContent(element.nativeElement, formatter.format(this.date));\r\n      this.cd.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  setContent(node: any, content: string) {\r\n    if (isDefined(node.textContent)) {\r\n      node.textContent = content;\r\n    } else {\r\n      node.data = content;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.intlSubscription) {\r\n      this.intlSubscription.unsubscribe();\r\n      this.intlSubscription = undefined;\r\n    }\r\n    if (this.clockSubscription) {\r\n      this.clockSubscription.unsubscribe();\r\n      this.clockSubscription = undefined;\r\n    }\r\n    this.stateChanges.complete();\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { TimeagoIntl } from './timeago.intl';\r\nimport { MINUTE, HOUR, DAY, WEEK, MONTH, YEAR } from './util';\r\n\r\nexport type Unit = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\r\n\r\nexport type Suffix = 'ago' | 'from now';\r\n\r\nexport type StringOrFn = ((value: number, millisDelta:  number) => string) | string;\r\n\r\nexport type NumberArray = [ string, string, string, string, string, string, string, string, string, string ];\r\n\r\nconst defaultFormattter = function(then: number): {value: number, unit: Unit, suffix: Suffix} {\r\n  const now = Date.now();\r\n  const seconds = Math.round(Math.abs(now - then) / 1000);\r\n  const suffix: Suffix = then < now ? 'ago' : 'from now';\r\n\r\n  const [value, unit]: [number, Unit] =\r\n    seconds < MINUTE\r\n      ? [Math.round(seconds), 'second']\r\n      : seconds < HOUR\r\n        ? [Math.round(seconds / MINUTE), 'minute']\r\n        : seconds < DAY\r\n          ? [Math.round(seconds / HOUR), 'hour']\r\n          : seconds < WEEK\r\n            ? [Math.round(seconds / DAY), 'day']\r\n            : seconds < MONTH\r\n              ? [Math.round(seconds / WEEK), 'week']\r\n              : seconds < YEAR\r\n                ? [Math.round(seconds / MONTH), 'month']\r\n                : [Math.round(seconds / YEAR), 'year'];\r\n\r\n  return {value, unit, suffix};\r\n}\r\n\r\nexport abstract class TimeagoFormatter {\r\n  abstract format(then: number): string\r\n}\r\n\r\n@Injectable()\r\nexport class TimeagoDefaultFormatter extends TimeagoFormatter {\r\n  format(then: number): string {\r\n    const {suffix, value, unit} = defaultFormattter(then);\r\n    return this.parse(value, unit, suffix);\r\n  }\r\n\r\n  private parse(value: number, unit: Unit, suffix: Suffix): string {\r\n    if (value !== 1) {\r\n      unit += 's';\r\n    }\r\n    return value + ' ' + unit + ' ' + suffix;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class TimeagoCustomFormatter extends TimeagoFormatter {\r\n  constructor(private intl: TimeagoIntl) {\r\n    super();\r\n  }\r\n\r\n  format(then: number): string {\r\n    const {suffix, value, unit} = defaultFormattter(then);\r\n    return this.parse(value, unit, suffix, Date.now(), then);\r\n  }\r\n\r\n  private parse(value: number, unit: Unit, suffix: Suffix, now: number, then: number) {\r\n    /** convert weeks to days if strings don't handle weeks */\r\n    if (unit === 'week' && !this.intl.strings.week && !this.intl.strings.weeks) {\r\n      const days = Math.round(Math.abs(now - then) / (1000 * 60 * 60 * 24));\r\n      value = days;\r\n      unit = 'day';\r\n    }\r\n\r\n    /** create a normalize function for given value */\r\n    const normalize = this.normalizeFn(value, now - then, this.intl.strings.numbers);\r\n\r\n    /** The eventual return value stored in an array so that the wordSeparator can be used */\r\n    const dateString: string[] = [];\r\n\r\n    /** handle prefixes */\r\n    if (suffix === 'ago' && this.intl.strings.prefixAgo) {\r\n      dateString.push(normalize(this.intl.strings.prefixAgo));\r\n    }\r\n    if (suffix === 'from now' && this.intl.strings.prefixFromNow) {\r\n      dateString.push(normalize(this.intl.strings.prefixFromNow));\r\n    }\r\n\r\n    /** Handle Main number and unit */\r\n    const isPlural = value > 1;\r\n    if (isPlural) {\r\n      const stringFn: StringOrFn = this.intl.strings[unit + 's'] || this.intl.strings[unit] || '%d ' + unit;\r\n      dateString.push(normalize(stringFn));\r\n    } else {\r\n      const stringFn: StringOrFn = this.intl.strings[unit] || this.intl.strings[unit + 's'] || '%d ' + unit;\r\n      dateString.push(normalize(stringFn));\r\n    }\r\n\r\n    /** Handle Suffixes */\r\n    if (suffix === 'ago' && this.intl.strings.suffixAgo) {\r\n      dateString.push(normalize(this.intl.strings.suffixAgo));\r\n    }\r\n    if (suffix === 'from now' && this.intl.strings.suffixFromNow) {\r\n      dateString.push(normalize(this.intl.strings.suffixFromNow));\r\n    }\r\n\r\n    /** join the array into a string and return it */\r\n    const wordSeparator = typeof this.intl.strings.wordSeparator === 'string' ? this.intl.strings.wordSeparator : ' ';\r\n    return dateString.join(wordSeparator);\r\n  }\r\n\r\n  /**\r\n   * If the numbers array is present, format numbers with it,\r\n   * otherwise just cast the number to a string and return it\r\n  */\r\n  private normalizeNumber(numbers: NumberArray, value: number) {\r\n    return numbers && numbers.length === 10\r\n      ? String(value).split('')\r\n          .map((digit: string) => digit.match(/^[0-9]$/) ? numbers[parseInt(digit, 10)] : digit)\r\n          .join('')\r\n      : String(value);\r\n  }\r\n\r\n  /**\r\n   * Take a string or a function that takes number of days and returns a string\r\n   * and provide a uniform API to create string parts\r\n  */\r\n  private normalizeFn(value: number, millisDelta: number, numbers?: NumberArray) {\r\n    return (stringOrFn: StringOrFn) =>\r\n      typeof stringOrFn === 'function'\r\n      ? stringOrFn(value, millisDelta).replace(/%d/g, this.normalizeNumber(numbers, value))\r\n      : stringOrFn.replace(/%d/g, this.normalizeNumber(numbers, value));\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { StringOrFn, NumberArray } from './timeago.formatter';\r\n\r\nexport interface IL10nsStrings {\r\n  prefixAgo?: StringOrFn;\r\n  prefixFromNow?: StringOrFn;\r\n  suffixAgo?: StringOrFn;\r\n  suffixFromNow?: StringOrFn;\r\n  second?: StringOrFn;\r\n  seconds?: StringOrFn;\r\n  minute?: StringOrFn;\r\n  minutes?: StringOrFn;\r\n  hour?: StringOrFn;\r\n  hours?: StringOrFn;\r\n  day?: StringOrFn;\r\n  days?: StringOrFn;\r\n  week?: StringOrFn;\r\n  weeks?: StringOrFn;\r\n  month?: StringOrFn;\r\n  months?: StringOrFn;\r\n  year?: StringOrFn;\r\n  years?: StringOrFn;\r\n  wordSeparator?: string;\r\n  numbers?: NumberArray;\r\n};\r\n\r\n/**\r\n * To modify the text displayed, create a new instance of TimeagoIntl and\r\n * include it in a custom provider\r\n */\r\n@Injectable()\r\nexport class TimeagoIntl {\r\n\r\n  strings: IL10nsStrings;\r\n\r\n  /**\r\n   * Stream that emits whenever the l10n strings are changed\r\n   * Use this to notify directives if the l10n strings have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { expand, skip } from 'rxjs/operators';\r\nimport { DAY, HOUR, MINUTE } from './util';\r\n\r\nexport abstract class TimeagoClock {\r\n  abstract tick(then: number): Observable<any>;\r\n}\r\n\r\n@Injectable()\r\nexport class TimeagoDefaultClock extends TimeagoClock {\r\n  tick(then: number): Observable<any> {\r\n    return of(0)\r\n      .pipe(\r\n        expand(() => {\r\n          const now = Date.now();\r\n          const seconds = Math.round(Math.abs(now - then) / 1000);\r\n\r\n          const period =\r\n            seconds < MINUTE\r\n              ? 1000\r\n              : seconds < HOUR\r\n                ? 1000 * MINUTE\r\n                : seconds < DAY\r\n                  ? 1000 * HOUR\r\n                  : 0;\r\n\r\n          return period ? timer(period) : Observable.empty<never>();\r\n        }),\r\n        skip(1)\r\n      );\r\n  }\r\n}\r\n",
    "export function isDefined(value: any): boolean {\r\n  return typeof value !== 'undefined' && value !== null;\r\n}\r\n\r\nexport function coerceBooleanProperty(value: any): boolean {\r\n  return value != null && `${value}` !== 'false';\r\n}\r\n\r\nexport function dateParser(date: any): Date {\r\n  const parsed = new Date(date);\r\n  if (!Number.isNaN(parsed.valueOf())) {\r\n    return parsed;\r\n  }\r\n\r\n  const parts: string[] = String(date).match(/\\d+/g);\r\n  if (parts === null || parts.length <= 2) {\r\n    return parsed;\r\n  } else {\r\n    const [firstP, secondP, ...restPs] = parts.map(x => parseInt(x, 10));\r\n    return new Date(Date.UTC(firstP, secondP - 1, ...restPs));\r\n  }\r\n}\r\n\r\nexport const MINUTE = 60;\r\nexport const HOUR = MINUTE * 60;\r\nexport const DAY = HOUR * 24;\r\nexport const WEEK = DAY * 7;\r\nexport const MONTH = DAY * 30;\r\nexport const YEAR = DAY * 365;\r\n"
  ],
  "names": [
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
